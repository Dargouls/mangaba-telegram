#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Respostas R√°pidas - M√©dico de Bolso
Respostas instant√¢neas para consultas m√©dicas comuns
"""

import logging
import re
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class QuickResponse:
    """Estrutura para respostas r√°pidas"""
    response: str
    follow_up_question: Optional[str] = None
    urgency_level: str = "BAIXO"
    requires_full_ai: bool = False

class QuickResponseEngine:
    """Motor de respostas r√°pidas para consultas comuns"""
    
    def __init__(self):
        self.response_patterns = self._initialize_patterns()
        self.common_medications = self._initialize_medications()
        self.symptom_responses = self._initialize_symptom_responses()
    
    def _initialize_patterns(self) -> Dict[str, QuickResponse]:
        """Inicializa padr√µes de respostas r√°pidas"""
        return {
            # Sauda√ß√µes
            r'\b(oi|ol√°|bom dia|boa tarde|boa noite)\b': QuickResponse(
                response="Ol√°! üëã Sou o M√©dico de Bolso. Como posso ajudar com sua sa√∫de hoje?",
                follow_up_question="Conte-me seus sintomas ou o que est√° sentindo."
            ),
            
            # Dor de cabe√ßa
            r'\b(dor de cabe√ßa|cefaleia|enxaqueca)\b': QuickResponse(
                response="Dor de cabe√ßa pode ter v√°rias causas. ü§ï",
                follow_up_question="Intensidade de 1-10? H√° quanto tempo? Tomou algum medicamento?",
                urgency_level="MODERADO"
            ),
            
            # Febre
            r'\b(febre|temperatura|febril)\b': QuickResponse(
                response="Febre indica que seu corpo est√° combatendo algo. üå°Ô∏è",
                follow_up_question="Qual a temperatura? H√° outros sintomas como dor no corpo?",
                urgency_level="MODERADO"
            ),
            
            # Dor no peito - EMERG√äNCIA
            r'\b(dor no peito|dor tor√°cica|peito doendo)\b': QuickResponse(
                response="üö® DOR NO PEITO √â EMERG√äNCIA! Procure atendimento IMEDIATO!",
                urgency_level="EMERG√äNCIA",
                requires_full_ai=True
            ),
            
            # Falta de ar - EMERG√äNCIA
            r'\b(falta de ar|dificuldade respirar|sufoco|ofegante)\b': QuickResponse(
                response="üö® DIFICULDADE RESPIRAT√ìRIA! V√° ao hospital AGORA!",
                urgency_level="EMERG√äNCIA",
                requires_full_ai=True
            ),
            
            # Dor de garganta
            r'\b(dor de garganta|garganta inflamada|engolir d√≥i)\b': QuickResponse(
                response="Dor de garganta √© comum. üò∑",
                follow_up_question="H√° febre? Dificuldade para engolir? H√° quanto tempo?",
                urgency_level="BAIXO"
            ),
            
            # Tosse
            r'\b(tosse|tossindo|pigarro)\b': QuickResponse(
                response="Tosse pode ser sinal de irrita√ß√£o ou infec√ß√£o. üò∑",
                follow_up_question="Tosse seca ou com catarro? H√° febre? H√° quanto tempo?",
                urgency_level="BAIXO"
            ),
            
            # N√°usea/V√¥mito
            r'\b(n√°usea|enjoo|v√¥mito|vomitando)\b': QuickResponse(
                response="N√°usea pode ter v√°rias causas. ü§¢",
                follow_up_question="Vomitou? H√° dor abdominal? Comeu algo diferente?",
                urgency_level="MODERADO"
            ),
            
            # Dor abdominal
            r'\b(dor na barriga|dor abdominal|est√¥mago doendo)\b': QuickResponse(
                response="Dor abdominal precisa ser avaliada. ü§ï",
                follow_up_question="Onde exatamente d√≥i? Intensidade? H√° n√°usea?",
                urgency_level="MODERADO",
                requires_full_ai=True
            ),
            
            # Diarreia
            r'\b(diarreia|diarr√©ia|intestino solto)\b': QuickResponse(
                response="Diarreia pode causar desidrata√ß√£o. üíß",
                follow_up_question="H√° sangue? Febre? H√° quanto tempo? Est√° se hidratando?",
                urgency_level="MODERADO"
            ),
            
            # Ins√¥nia
            r'\b(ins√¥nia|n√£o consigo dormir|sem sono)\b': QuickResponse(
                response="Problemas de sono afetam a sa√∫de. üò¥",
                follow_up_question="H√° quanto tempo? Stress? Mudan√ßas na rotina?",
                urgency_level="BAIXO"
            ),
            
            # Ansiedade
            r'\b(ansiedade|ansioso|nervoso|estresse)\b': QuickResponse(
                response="Ansiedade √© comum, mas pode ser tratada. üíô",
                follow_up_question="Sintomas f√≠sicos? Palpita√ß√µes? H√° quanto tempo?",
                urgency_level="BAIXO"
            ),
            
            # Medicamentos
            r'\b(posso tomar|que medicamento|rem√©dio para)\b': QuickResponse(
                response="‚ö†Ô∏è N√£o posso prescrever medicamentos.",
                follow_up_question="Consulte um m√©dico ou farmac√™utico para orienta√ß√£o segura.",
                requires_full_ai=True
            )
        }
    
    def _initialize_medications(self) -> Dict[str, str]:
        """Inicializa respostas sobre medicamentos comuns"""
        return {
            "paracetamol": "Paracetamol √© seguro nas doses corretas. Siga a bula. üíä",
            "ibuprofeno": "Ibuprofeno √© anti-inflamat√≥rio. Cuidado se tem problemas g√°stricos. üíä",
            "dipirona": "Dipirona √© analg√©sico comum no Brasil. Respeite a dosagem. üíä",
            "aspirina": "Aspirina tem v√°rias indica√ß√µes. Consulte orienta√ß√£o m√©dica. üíä"
        }
    
    def _initialize_symptom_responses(self) -> Dict[str, QuickResponse]:
        """Inicializa respostas para sintomas espec√≠ficos"""
        return {
            "emergency_symptoms": QuickResponse(
                response="üö® EMERG√äNCIA M√âDICA! Procure atendimento IMEDIATO!",
                urgency_level="EMERG√äNCIA"
            ),
            "urgent_symptoms": QuickResponse(
                response="‚ö†Ô∏è Sintoma preocupante. Procure atendimento m√©dico hoje.",
                urgency_level="URGENTE"
            ),
            "moderate_symptoms": QuickResponse(
                response="Sintoma que merece aten√ß√£o. ü©∫",
                urgency_level="MODERADO"
            ),
            "mild_symptoms": QuickResponse(
                response="Sintoma comum, mas vamos avaliar. üòä",
                urgency_level="BAIXO"
            )
        }
    
    def find_quick_response(self, message: str) -> Optional[QuickResponse]:
        """Encontra resposta r√°pida para a mensagem"""
        message_lower = message.lower()
        
        # Verificar padr√µes de emerg√™ncia primeiro
        emergency_patterns = [
            r'\b(dor no peito|infarto|ataque card√≠aco)\b',
            r'\b(falta de ar severa|n√£o consigo respirar)\b',
            r'\b(desmaiei|perdi consci√™ncia)\b',
            r'\b(sangramento intenso|muito sangue)\b',
            r'\b(convuls√£o|convuls√µes)\b'
        ]
        
        for pattern in emergency_patterns:
            if re.search(pattern, message_lower):
                return self.symptom_responses["emergency_symptoms"]
        
        # Verificar padr√µes normais
        for pattern, response in self.response_patterns.items():
            if re.search(pattern, message_lower):
                return response
        
        # Verificar medicamentos
        for med, response_text in self.common_medications.items():
            if med in message_lower:
                return QuickResponse(
                    response=response_text,
                    follow_up_question="Tem alguma alergia? Est√° tomando outros medicamentos?",
                    requires_full_ai=True
                )
        
        return None
    
    def get_contextual_response(self, message: str, conversation_count: int) -> Optional[QuickResponse]:
        """Retorna resposta contextual baseada no n√∫mero de mensagens"""
        quick_response = self.find_quick_response(message)
        
        if quick_response:
            # Adaptar resposta baseada no contexto da conversa
            if conversation_count == 1:  # Primeira mensagem
                if quick_response.urgency_level != "EMERG√äNCIA":
                    quick_response.response += " Vou te ajudar a entender melhor."
            
            elif conversation_count > 3:  # Conversa longa
                quick_response.requires_full_ai = True  # Usar IA completa para an√°lise detalhada
        
        return quick_response
    
    def is_emergency_keyword(self, message: str) -> bool:
        """Verifica se a mensagem cont√©m palavras-chave de emerg√™ncia"""
        emergency_keywords = [
            "emerg√™ncia", "urgente", "grave", "s√©rio", "preocupado",
            "dor forte", "muito mal", "piorando", "n√£o aguento"
        ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in emergency_keywords)
    
    def get_follow_up_suggestions(self, symptom_category: str) -> List[str]:
        """Retorna sugest√µes de perguntas de follow-up"""
        suggestions = {
            "pain": [
                "Qual a intensidade da dor de 1 a 10?",
                "A dor √© constante ou vai e vem?",
                "Algo melhora ou piora a dor?"
            ],
            "fever": [
                "Mediu a temperatura? Qual valor?",
                "H√° outros sintomas como dor no corpo?",
                "Tomou algum medicamento para febre?"
            ],
            "digestive": [
                "H√° n√°usea ou v√¥mito?",
                "Mudou algo na alimenta√ß√£o?",
                "A dor piora ap√≥s comer?"
            ]
        }
        
        return suggestions.get(symptom_category, [
            "Pode me contar mais detalhes?",
            "H√° quanto tempo isso come√ßou?",
            "Tem outros sintomas?"
        ])