#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Handlers do Bot Telegram - M√©dico de Bolso
Gerencia comandos e mensagens dos usu√°rios
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from src.config.settings import WELCOME_MESSAGE, HELP_MESSAGE, DISCLAIMER_MESSAGE
from src.ai.gemini_client import GeminiMedicalAI
from src.medical.triage import MedicalTriage
from src.utils.session_manager import SessionManager

logger = logging.getLogger(__name__)

# Inst√¢ncias globais
gemini_ai = GeminiMedicalAI()
medical_triage = MedicalTriage()
session_manager = SessionManager()

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler para o comando /start"""
    try:
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "Usu√°rio"
        
        logger.info(f"Usu√°rio {user_id} ({user_name}) iniciou uma sess√£o")
        
        # Inicializar sess√£o do usu√°rio
        session_manager.create_session(user_id)
        
        # Enviar mensagem de boas-vindas
        await update.message.reply_text(
            f"Ol√°, {user_name}!\n\n{WELCOME_MESSAGE}",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Enviar disclaimer m√©dico
        await update.message.reply_text(
            DISCLAIMER_MESSAGE,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Erro no handler start: {e}")
        await update.message.reply_text(
            "‚ùå Ocorreu um erro ao iniciar o atendimento. Tente novamente."
        )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler para o comando /help"""
    try:
        await update.message.reply_text(
            HELP_MESSAGE,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Erro no handler help: {e}")
        await update.message.reply_text(
            "‚ùå Erro ao exibir ajuda. Tente novamente."
        )

async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler para o comando /status - mostra status do sistema de fallback"""
    try:
        # Obter status do sistema
        status = gemini_ai.get_system_status()
        
        status_message = (
            f"ü§ñ **Status do Sistema de IA - Tudo sob controle!**\n\n"
            f"üì° **API em uso:** {status['current_api']}/{status['total_apis']} (funcionando perfeitamente)\n"
            f"üß† **Modelo ativo:** {status['current_model']} (pronto para ajud√°-lo)\n\n"
            f"üìä **Informa√ß√µes t√©cnicas:**\n"
            f"‚Ä¢ ‚úÖ Combina√ß√µes dispon√≠veis: {status['available_combinations']}\n"
            f"‚Ä¢ ‚ö†Ô∏è Combina√ß√µes com problemas: {status['failed_combinations']}\n"
            f"‚Ä¢ ‚è≥ Aguardando libera√ß√£o: {status['rate_limited_combinations']}\n\n"
        )
        
        if status['available_combinations'] > 0:
            status_message += "üü¢ **Sistema funcionando perfeitamente - pronto para atend√™-lo!**"
        elif status['rate_limited_combinations'] > 0:
            status_message += "üü° **Sistema operacional com algumas limita√ß√µes tempor√°rias - ainda posso ajud√°-lo!**"
        else:
            status_message += "üî¥ **Sistema temporariamente indispon√≠vel - tente novamente em alguns minutos**"
        
        await update.message.reply_text(
            status_message,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Erro no handler status: {e}")
        await update.message.reply_text(
            "‚ùå Ops! N√£o consegui verificar o status no momento. Tente novamente em instantes."
        )

async def reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler para o comando /reset - reseta combina√ß√µes falhadas (admin)"""
    try:
        # Reset das combina√ß√µes falhadas
        gemini_ai.reset_failed_combinations()
        
        await update.message.reply_text(
            "üîÑ **Sistema Reiniciado com Sucesso!**\n\n"
            "‚ú® Todas as combina√ß√µes foram resetadas com cuidado\n"
            "üîß O sistema est√° novamente otimizado para oferecer o melhor atendimento\n"
            "üíô Pronto para ajud√°-lo(a) com total efici√™ncia!",
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Erro no handler reset: {e}")
        await update.message.reply_text(
            "‚ùå Ops! N√£o consegui reiniciar o sistema no momento. Tente novamente em instantes."
        )

async def medical_consultation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler principal para consultas m√©dicas"""
    try:
        user_id = update.effective_user.id
        user_message = update.message.text
        
        # Verificar se usu√°rio tem sess√£o ativa
        if not session_manager.has_active_session(user_id):
            await update.message.reply_text(
                "üòä Ol√°! Parece que nossa conversa anterior expirou. \n\n"
                "Para sua seguran√ßa e para oferecer o melhor atendimento, use /start para iniciarmos uma nova consulta!"
            )
            return
        
        # Mostrar que o bot est√° processando
        await update.message.reply_chat_action("typing")
        
        # Adicionar mensagem do usu√°rio ao hist√≥rico
        session_manager.add_message(user_id, "user", user_message)
        
        # Processar consulta m√©dica
        response = await process_medical_consultation(user_id, user_message)
        
        # Adicionar resposta do bot ao hist√≥rico
        session_manager.add_message(user_id, "assistant", response)
        
        # Enviar resposta
        await update.message.reply_text(
            response,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Atualizar timestamp da sess√£o
        session_manager.update_session(user_id)
        
    except Exception as e:
        logger.error(f"Erro no handler de consulta m√©dica: {e}")
        await update.message.reply_text(
            "‚ùå Ocorreu um erro ao processar sua consulta. Tente reformular sua pergunta."
        )

async def process_medical_consultation(user_id: int, user_message: str) -> str:
    """Processa consulta m√©dica usando IA, triagem e conversa√ß√£o din√¢mica"""
    try:
        # Obter hist√≥rico da sess√£o
        session_history = session_manager.get_session_history(user_id)
        
        # An√°lise de triagem inicial
        triage_result = medical_triage.analyze_symptoms(user_message)
        
        # Processar com Gemini AI usando conversa√ß√£o din√¢mica
        ai_response = await gemini_ai.process_medical_query(
            user_message=user_message,
            user_id=str(user_id),  # Converter para string para compatibilidade
            session_history=session_history,
            triage_data=triage_result
        )
        
        return ai_response
        
    except Exception as e:
        logger.error(f"Erro ao processar consulta m√©dica: {e}")
        return "‚ùå N√£o foi poss√≠vel processar sua consulta no momento. Tente novamente em alguns instantes."